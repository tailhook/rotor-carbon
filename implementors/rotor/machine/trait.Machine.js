(function() {var implementors = {};
implementors["rotor_tools"] = ["impl&lt;M:&nbsp;<a class='trait' href='rotor_tools/timer/trait.Timer.html' title='rotor_tools::timer::Timer'>Timer</a>&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_tools/timer/struct.Ticker.html' title='rotor_tools::timer::Ticker'>Ticker</a>&lt;M&gt;","impl&lt;M:&nbsp;<a class='trait' href='rotor_tools/sync/trait.Replaceable.html' title='rotor_tools::sync::Replaceable'>Replaceable</a>&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_tools/sync/struct.Mutexed.html' title='rotor_tools::sync::Mutexed'>Mutexed</a>&lt;M&gt;","impl&lt;S,&nbsp;C,&nbsp;D&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='enum' href='rotor_tools/compose/enum.Spawn.html' title='rotor_tools::compose::Spawn'>Spawn</a>&lt;S&gt; <span class='where'>where S: <a class='trait' href='rotor_tools/compose/trait.Spawner.html' title='rotor_tools::compose::Spawner'>Spawner</a>&lt;Child=C,&nbsp;Seed=D&gt; + <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a>&lt;Context=C::Context,&nbsp;Seed=D&gt;, C: <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a>&lt;Seed=<a class='enum' href='void/enum.Void.html' title='void::Void'>Void</a>&gt;</span>","impl&lt;T:&nbsp;<a class='trait' href='rotor_tools/uniform/trait.Action.html' title='rotor_tools::uniform::Action'>Action</a>&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_tools/uniform/struct.Uniform.html' title='rotor_tools::uniform::Uniform'>Uniform</a>&lt;T&gt;",];implementors["rotor_stream"] = ["impl&lt;P:&nbsp;<a class='trait' href='rotor_stream/trait.Protocol.html' title='rotor_stream::Protocol'>Protocol</a>&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_stream/struct.Stream.html' title='rotor_stream::Stream'>Stream</a>&lt;P&gt;","impl&lt;M,&nbsp;A&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='enum' href='rotor_stream/enum.Accept.html' title='rotor_stream::Accept'>Accept</a>&lt;M,&nbsp;A&gt; <span class='where'>where A: <a class='trait' href='mio/io/trait.TryAccept.html' title='mio::io::TryAccept'>TryAccept</a>&lt;Output=M::Socket&gt; + <a class='trait' href='mio/io/trait.Evented.html' title='mio::io::Evented'>Evented</a> + <a class='trait' href='https://doc.rust-lang.org/nightly/core/any/trait.Any.html' title='core::any::Any'>Any</a>, M: <a class='trait' href='rotor_stream/trait.Accepted.html' title='rotor_stream::Accepted'>Accepted</a></span>","impl&lt;P:&nbsp;<a class='trait' href='rotor_stream/trait.Protocol.html' title='rotor_stream::Protocol'>Protocol</a>&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_stream/struct.Persistent.html' title='rotor_stream::Persistent'>Persistent</a>&lt;P&gt; <span class='where'>where P: <a class='trait' href='rotor_stream/trait.Protocol.html' title='rotor_stream::Protocol'>Protocol</a>, P::Seed: <a class='trait' href='https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html' title='core::clone::Clone'>Clone</a>, P::Socket: <a class='trait' href='rotor_stream/trait.ActiveStream.html' title='rotor_stream::ActiveStream'>ActiveStream</a>, P::Socket::Address: <a class='trait' href='https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html' title='core::fmt::Debug'>Debug</a></span>",];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
